# filter section

filter {
    if [type] == "nginx-access" {
        mutate {
            remove_field => [ "beat", "offset", "input_type" ]
        }
        grok {
            match => {
                "message" => "%{IPORHOST:clientip} %{NGUSER:ident} %{NGUSER:auth} \[%{HTTPDATE:timestamp}\] \"%{WORD:verb} %{DATA:request} HTTP/%{NUMBER:httpversion}\" %{NUMBER:response} (?:%{NUMBER:bytes}|-) (?:\"(?:%{URI:referrer}|-)\"|%{QS:referrer})(?:;|) %{QS:agent}"
            }
            tag_on_failure => "message_grok"
        }

## Dropping all requests made by Etherpad which can be heavily polluting logs. Beware this check is pretty violent.
        if [request] =~ /^\/socket.io/ {
            drop { }
        }
## Slicing URI for more precision levels : All records that has tag urilvl_grok aren't really interesting.
        grok {
           match => { "request" => "(http://%{URIHOST:uri_domain}/|/)%{DATA:uri_lvl1}/%{DATA:uri_lvl2}/%{GREEDYDATA:uri_lvl3}" }
            tag_on_failure => "urilvl_grok"
        }

        date {
            #22/Feb/2016:13:54:05 +0100
            match => ["timestamp", "dd/MMM/YYYY:HH:mm:ss Z"]
        }
        useragent {
            source => "agent"
        }

## This is a trick to extract all BSF interesting requests : as kiwix applications requests are formed as /mykiwixapp/A/mycontent.html | Khan's URI contains /api/content/kahn* | Mediacenter's packages /xx/mediacenter/?source=xxxx)

        if [uri_lvl2] == "A" {
          mutate {
            copy => { "uri_lvl1" => "Application" }
          }
        } else if [uri_lvl1] == "api" and [uri_lvl2] == "content" and [uri_lvl3] =~ "khan" {
          mutate {
            add_field => { "Application" => "KhanAcademy" }
          }
        } else if [uri_lvl2] == "mediacenter" {
## Extracting package name
        grok {
            match => [ "request", "^(http://%{URIHOST}/|/)[a-z]{2}/mediacenter/\?source=(?<pkg_name>[a-z\-]*)" ]
            add_field => { "Application" => "Mediacenter" }
            tag_on_failure => "pkgname_grok"
        }
## Extracting media ID
        grok {
            match => [ "request", "^(http://%{URIHOST}/|/)[a-z]{2}/mediacenter/document/(?<media_id>[0-9]*)" ]
            tag_on_failure => "media_ID_grok"
        }
       }
     } else if [type] == "nginx-error" {
         grok {
             match => [ "message" , "(?<timestamp>%{YEAR}[./-]%{MONTHNUM}[./-]%{MONTHDAY}[- ]%{TIME}) \[%{LOGLEVEL:severity}\] %{POSINT:pid}#%{NUMBER}: %{GREEDYDATA:errormessage}(?:, client: (?<client>%{IP}|%{HOSTNAME}))(?:, server: %{IPORHOST:server})(?:, request: %{QS:request})?(?:, upstream: \"%{URI:upstream}\")?(?:, host: %{QS:host})?(?:, referrer: \"%{URI:referrer}\")"]
         overwrite => [ "message" ]
         tag_on_failure => "nginx-error_grok"
         }
          
         date {
             match => [ "timestamp" , "YYYY/MM/dd HH:mm:ss" ]
             remove_field => [ "timestamp" ]
         }
     }
}
